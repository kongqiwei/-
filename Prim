#Prim算法思想：
#Prim:S、V为两个集合，S中初始为{1}，V中包含了所有的顶点，然后从V-S中选出和S中顶点距离最近的顶点j，并将j添加到S中。
#设置两个数组closest和lowcost。
#对于每个j属于V-S，closet[j]就是j在S中的邻接点，它于S中其他邻接点k相比较有v[j][closet[j]]<=v[j][k]，其中lowcost[j]的值就是v[j][closest]。
#最后lowcost存储的就是相应的最小生成树的权值，而对于每个顶点，closest中可以找到最小生成树所对应的边。

def cmp(key1, key2):
    return (key1, key2) if key1 < key2 else (key2, key1)
    
def prim(graph, init_node):
    visited = {init_node}
    candidate = set(graph.keys())
    candidate.remove(init_node)  #add all nodes into candidate set, except the start node
    tree = []
    while len(candidate) > 0:
        edge_dict = dict()
        for node in visited:  # find all visited nodes
            for connected_node, weight in graph[node].items():  # find those were connected
                if connected_node in candidate:
                    edge_dict[cmp(connected_node, node)] = weight
        edge, cost = sorted(edge_dict.items(), key=lambda kv: kv[1])[0]  # find the minimum cost edge
        tree.append(edge)
        visited.add(edge[0])  # cause you dont know which node will be put in the first place
        visited.add(edge[1])
        candidate.discard(edge[0]) # same reason. discard wont raise an exception.
        candidate.discard(edge[1])
    return tree

if __name__ == '__main__':
    graph_dict = {
        "A": {"B": 7, "D": 5},
        "B": {"A": 7, "C": 8, "D": 9, "E": 5},
        "C": {"B": 8, "E": 5},
        "D": {"A": 5, "B": 9, "E": 15, "F": 6},
        "E": {"B": 7, "C": 5, "D": 15, "F": 8, "G": 9},
        "F": {"D": 6, "E": 8, "G": 11},
        "G": {"E": 9, "F": 11}
    }
    path = prim(graph_dict, "D")
    print(path)  # [('A', 'D'), ('D', 'F'), ('A', 'B'), ('B', 'E'), ('C', 'E'), ('E', 'G')]
