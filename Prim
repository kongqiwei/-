import numpy as np
def Prim(n, weights):
    # lowcost[j]的值为weights[j][closet[j]]
    lowcost = np.array(weights[0])
    # closest[j]是j在S中的邻接顶点
    closest = np.zeros(n)
    # 确定节点是否使用
    s = np.zeros(n, bool)
    # 从节点1开始求最小生成树
    s[0] = True
    # 求邻接节点，循环n-1次；
    for i in range(1, n):
        # 设置一个变量用来存放最小值；
        minNumber = float('inf')
        j = 1
        # 找到当前节点到其他节点的权值最小的点；
        for k in range(1, n):
            if lowcost[k] < minNumber and not s[k] and lowcost[k] != 0:
                minNumber = lowcost[k]
                j = k
        print(j + 1, end=" ")
        print(int(closest[j] + 1), end=" ")
        print(weights[j][int(closest[j])])
        # 将j放入S集合中
        s[j] = True
        # 更新lowcost中其他节点到S中节点最短距离
        for k in range(1, n):
            if not s[k] and weights[j][k] != 0:
                if weights[j][k] < lowcost[k] or lowcost[k] == 0:
                    lowcost[k] = weights[j][k]
                    closest[k] = j

def main():
    n = int(input())
    weight = []
    for i in range(n):
        weight.append(list(map(int, input().rstrip().split())))
    weights = np.array(weight).reshape(n, n)
    Prim(n, weights)

if __name__ == '__main__':
    main()
